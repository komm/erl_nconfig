
config <- ( freeline / crlf / section / commandline / comment / freeline / crlf )* `
    [X || X <- lists:flatten(Node), X /= {none}, X /= {crlf}]
`
;

section <- (freeline / space)* block:word (freeline / space)* "{" (freeline / space)* crlf* ((freeline / space)* cwd:commandline / comment / sec:section crlf*)* "}" (freeline / space)* crlf*`
    {proplists:get_value(block, Node),
        [X || {cwd,X} <-lists:flatten(Node) ] ++
        [ X|| {sec, X} <- lists:flatten(Node)]
    }

`
;

commandline <- (freeline / space)* comm:command space* "=" space* (param:argv / param:parameter) space* delimeter`
    {
        proplists:get_value(comm,Node),
        proplists:get_value(param,Node)
    }
`
;
freeline <- space* comment / space* crlf `
    {none}
`
;

command <- word ~;
parameter <- ipv / path / word ~;
path <- (word ":")? "/"* (word (":" word)? "/"?)* word?`
    iolist_to_binary(Node)
`;
ipv <- [0-9]+ "." [0-9]+ "." [0-9]+ "." [0-9]+  (":" [0-9]+)?`
    iolist_to_binary(Node)
`;
word <- [a-zA-Z0-9@_.-]+ `
    iolist_to_binary(Node)
`;
argv <- '"' [a-zA-Z0-9.:=_\ \t\/-]* '"' `
    list_to_binary(binary_to_list(iolist_to_binary(Node))--[34,34])
`;

delimeter <- (";" space* )* ~;
space <- [\ \t] ~;
comment <- '#' (!"\n" .)* `
    {comment}
`
;
crlf <- [\r]? [\n]+ `
    {crlf}
`
;

